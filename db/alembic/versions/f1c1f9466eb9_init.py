"""init

Revision ID: f1c1f9466eb9
Revises: 
Create Date: 2025-08-10 23:26:27.248723

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f1c1f9466eb9'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('log_api',
    sa.Column('id', sa.BigInteger(), sa.Identity(always=False, start=0, increment=1), nullable=False),
    sa.Column('provider', sa.String(length=64), nullable=False),
    sa.Column('endpoint', sa.String(length=128), nullable=False),
    sa.Column('requesting_user', sa.String(length=64), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('args', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('full_call', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='porygon'
    )
    op.create_table('matches_lol',
    sa.Column('id', sa.String(length=64), nullable=False),
    sa.Column('match_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('players', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('api_version', sa.String(length=16), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='porygon'
    )
    op.create_table('matches_tft',
    sa.Column('id', sa.String(length=64), nullable=False),
    sa.Column('match_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('players', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('api_version', sa.String(length=16), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='porygon'
    )
    op.create_table('messages',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('discord_channel_id', sa.Text(), nullable=False),
    sa.Column('discord_message_id', sa.Text(), nullable=False),
    sa.Column('author_id', sa.Text(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('discord_message_id'),
    schema='porygon'
    )
    op.create_table('users',
    sa.Column('id', sa.BigInteger(), sa.Identity(always=False, start=0, increment=1), nullable=False),
    sa.Column('discord_id', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('discord_id'),
    schema='porygon'
    )
    op.drop_table('logs')
    op.drop_index(op.f('idx_messages_channel_created'), table_name='messages')
    op.drop_table('messages')
    op.drop_table('schema_migrations')
    op.drop_table('matches_tft')
    op.drop_table('matches_lol')
    op.drop_table('log_api')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('discord_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('username', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey')),
    sa.UniqueConstraint('discord_id', name=op.f('users_discord_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('log_api',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('requesting_user', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('args', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('full_call', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('log_api_pkey'))
    )
    op.create_table('matches_lol',
    sa.Column('id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('match_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('players', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=False),
    sa.Column('api_version', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('matches_lol_pkey'))
    )
    op.create_table('matches_tft',
    sa.Column('id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('match_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('players', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=False),
    sa.Column('api_version', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('matches_tft_pkey'))
    )
    op.create_table('schema_migrations',
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('version', name=op.f('schema_migrations_pkey'))
    )
    op.create_table('messages',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('discord_channel_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('discord_message_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('messages_pkey')),
    sa.UniqueConstraint('discord_message_id', name=op.f('messages_discord_message_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_messages_channel_created'), 'messages', ['discord_channel_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_table('logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('query', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('results', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('logs_pkey'))
    )
    op.drop_table('users', schema='porygon')
    op.drop_table('messages', schema='porygon')
    op.drop_table('matches_tft', schema='porygon')
    op.drop_table('matches_lol', schema='porygon')
    op.drop_table('log_api', schema='porygon')
    # ### end Alembic commands ###
